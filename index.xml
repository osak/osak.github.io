<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>osak.jp</title>
    <link>https://osak.jp/</link>
    <description>Recent content on osak.jp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 01 Nov 2021 04:00:00 -0500</lastBuildDate><atom:link href="https://osak.jp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>最近やってたこと</title>
      <link>https://osak.jp/posts/ja/recent-activities-2021-11-01/</link>
      <pubDate>Mon, 01 Nov 2021 04:00:00 -0500</pubDate>
      
      <guid>https://osak.jp/posts/ja/recent-activities-2021-11-01/</guid>
      <description>ブログを書く気力が出なくて、はてなブログで書いてた月例報告を3ヶ月連続でスキップしている。仕事等で精神的に疲れていて振り返りをする気力が出なかったというのも一因としてあるが、はてなブログのエディタが重くて使いづらいというのも理由としては大きい。ローカルでMarkdownを書く形なら書きやすいんじゃないか……と思ったのでこっちで書いてみる。
 ゲーム。8月末についにFactorioに手を出した。デモ版を15時間くらいやったあとに製品版を買って、61時間弱で初クリアした。その次は33時間半、RTAやWiki等を見てなんとなく勉強したあとの3回目は19時間半。3回目のクリア後は引き続きプレイして、全研究の実績を解除した。プレイし始めて最初の1週間くらいはほぼ全ての時間をFactorioに使っている感じで、夜1時ころにプレイし始めて気付いたら18時間経って夜7時になってるといった密度でプレイしていた。結局1ヶ月で130時間くらいプレイして、やりたいことは一段落したのでゲームプレイはやめてRTAや極限攻略動画を見ている。Michael Hendriks氏のシリーズが面白い。しばらく時間を置いてまたやりたい気持ちが復活してきたので、何かMODを入れてプレイしようと思っている。
 読んだ漫画。読書メーターの記録を見返すと、7月以降に以下の作品を新しく読んでいる。
 らーめん再遊記（3巻） らーめん才遊記 ヤマケイ新書 山岳遭難の教訓 &amp;ndash;実例に学ぶ生還の条件&amp;ndash; 狐のお嫁ちゃん 喰いしん坊！ ホレンテ島の魔法使い メイドインアビス（10巻） ご注文はうさぎですか？ うちの師匠はしっぽがない（5、6巻） 紡ぐ乙女と大正の月（2巻） ジョジョリオン（27巻） パンプキン・シザーズ 刃牙道 バキ道 さよなら幽霊ちゃん  あと、覚えてる限りではバキ道を読んだあとでバキシリーズを全部読み返したのと、Twitterでなんか言及を見かけたので火の鳥を読み返した。まあ漫画の読み返しはよくあるのでいちいち書いてるとキリがない。
印象に残ってるやつだと、ごちうさは面白かった。アニメ1期の1話を見てあんまり面白くないなと思って以来作品としては触れてなかったが、COMIC FUZの月額プランで読めるきららMAXに載ってる最近の話は面白いので、せっかくだし履修しておこうと思って単行本を全部読んだ。漫画は最初から絵柄も安定しているし、キャラの作り込みやストーリーもしっかりしていて、10年前に連載開始した作品なのに最近のストーリー重視のきらら漫画と比べても全く引けを取らない濃さだった。
パンプキン・シザーズも面白かった。生身で戦車と戦えるオーランドはバキのような純粋な力の興奮があるし、WW1くらいの世界から技術力だけ超高速で進歩したようなアンバランスな世界観や軍のパンプキン・シザーズ部隊を中心にしたエピソード構成は、攻殻機動隊SACの個別エピソードのような独特のSFっぽさと人の葛藤を描く味わいがある。かなり終わりに近づいていながらも完結してないのが残念。
 ルベーグ積分の勉強は、教科書（伊藤清三「ルベーグ積分入門」）の測度論パートを抜け、ルベーグ積分の定義と収束定理まで終わらせたので一区切りというところまで到達した。ルベーグ積分を知ったことそのものよりも、測度論を勉強する過程で身についた無限に対する感覚や証明のテクニックがかなり有用だと感じる。
 いっぺんにまとまった文章を書こうとすると気後れしがちなので、これくらいの粒度でちまちま書くのがいいのかもしれない。しばらくこういうスタイルで近況報告を書けるといいな。</description>
    </item>
    
    <item>
      <title>ICFPC2021 Writeup</title>
      <link>https://osak.jp/posts/en/icfpc-2021/</link>
      <pubDate>Tue, 13 Jul 2021 09:10:00 -0500</pubDate>
      
      <guid>https://osak.jp/posts/en/icfpc-2021/</guid>
      <description>I participated in ICFP Content 2021 with regular teammates. Our team name was &amp;ldquo;manarimo&amp;rdquo;, which is what we&amp;rsquo;ve been using for years recently.
 Repository： https://github.com/manarimo/ICFPC2021/ Portal website： http://icfpc2021-manarimo.s3-website-us-east-1.amazonaws.com/best.html Manual solver： http://icfpc2021-manarimo.s3-website-us-east-1.amazonaws.com/kenkoooo/#/problem/1  We ranked at the second place as of when the scoreboard was frozen. I&amp;rsquo;m happy with this result as we are #1 among Japanese teams. I was thinking we could get the global #1, however, RGBTeam did a better job then us.</description>
    </item>
    
    <item>
      <title>ICFPC2021感想</title>
      <link>https://osak.jp/posts/ja/icfpc-2021/</link>
      <pubDate>Tue, 13 Jul 2021 07:10:00 -0500</pubDate>
      
      <guid>https://osak.jp/posts/ja/icfpc-2021/</guid>
      <description>ICFP Content 2021にいつものメンバーで参加した。チーム名はここ最近使っているmanarimoにした。
 リポジトリ： https://github.com/manarimo/ICFPC2021/ ポータルサイト： http://icfpc2021-manarimo.s3-website-us-east-1.amazonaws.com/best.html 手動ソルバー： http://icfpc2021-manarimo.s3-website-us-east-1.amazonaws.com/kenkoooo/#/problem/1  順位は終了前のスコアボード凍結時点で2位。とりあえず日本勢の中では1位になれたので嬉しい。全体1位も行けるかと思っていたけど、RGBTeamが強かった。他のチームもいい解を出し惜しみして潜伏しているかもしれないけど、少なくとも今は見えない点数に価値はないので……。
概要 &amp;amp; 方針    今年の問題は「脳カベ」というゲーム（自分は知らなかったけど、とんねるずの1コーナーらしい）を題材にしており、メッシュとして表現された人物を多角形の中に埋め込む問題だった。 メッシュの辺の長さをあまり変えないようにしながら頂点の座標を好きに選ぶことで多角形に埋め込む。ただし座標は整数である必要がある。そうして配置を決めたあと、多角形の各点について一番近い頂点との距離を計算し、その総和が小さいほどよい。
いかにも2016年の折り紙回を彷彿とさせる設定で、手作業で解くのが肝だと判断したので、とりあえず手で遊べるビジュアライザの構築を優先して、並列で焼きなましベースや特定のパターンに特化したプログラムも実装するという方針になった。 24時間が経過したところでルール追加の発表があり、各面ごとに特定の座標にメッシュの頂点を配置すると、他の特定の面で制限を緩和するアイテムが使えるようになるというシステムが導入された。たとえばメッシュの頂点を1点だけ多角形の外に配置したり、1辺だけ長さ制約を無視して伸び縮みさせられるようになったりする。これらも基本的には手作業で対応したが、アイテムを取ろうとするとその面では最適解を諦める必要があるケースも存在するため、アイテムを取るか取らないかは全体の最適性を考える必要がある。いかにも計画問題っぽい見た目をしているので、とりあえず各面についてアイテムを使う解と使わない解を用意して、依存している面でアイテムが取れているかどうかを考慮しつつ提出時に最適な組み合わせを計算するという方針にした（最終的には線形計画問題としてライブラリで殴った）。
最終的には以下のツール群が作られていた（だいたい時系列順）。
 bruteforce： 全ての頂点の配置を試し、有効かつ一番スコアの良かったものを出力する (@pepsin_amylase, @y3eadgbe) checker： 解の正当性を検査する (@osa_k, @pepsin_amylase) gen_web： 問題と解答を一覧するためのHTMLを生成する (@osa_k) ビジュアライザ： 手で頂点を動かして遊べるビジュアライザ (@kenkoooo &amp;amp; keita) 焼きなまし： 近傍としては点の1マス移動、辺の1マス移動、全体の1マス移動、次数1の点の点対称移動、次数2の点の鏡像移動、多角形の頂点上へのワープを使い、ペナルティとしてははみ出ている頂点の多角形までの距離、はみ出ている辺の個数、長さ制約を満たしていない辺の逸脱度合いを使っている (@kawatea, @y3eadgbe, @osa_k) 外周うめるやつ： ぴったり埋め込まれた状態から頂点をシャッフルしたような問題が複数あった（例: 64）ため、メッシュの辺の長さと多角形の辺の長さを比べて、連続して一致するような頂点列を出力する (@yuusti) manten： スコアボードから満点解の存在が分かっている問題に対して、メッシュの頂点と多角形の頂点の対応関係を全て試す (@pepsin_amylase) package_solutions： 生成した解答ファイルの中から一番点数が高いものを提出する。アイテムが追加された後は、どの面でアイテムを取得するのがいいかを線形計画問題として解くようになった (@pepsin_amylase) globalist-optimize： GLOBALISTが使える問題に対して、山登り法を使ってコストを最適化する (@kenkoooo)  手動ではmkut, @y3eadgbe, @kawatea, @yuustiが中心になってひたすらパズルを解いていた。64や105のような問題を、自動ソルバの力を借りずに手だけで解いていくのは見ていてかなり面白かった。
自分のやったこと    自分は主にポータルサイトの管理、手作業での解答作成、焼きなましの最適化、焼きなましの並列実行を行った。
ポータルサイト    ポータルサイトは例年はWebアプリケーションを作っているのだが、毎年I/O絡みで何かしら問題が起きたり変なバグを埋め込んで嫌なタイミングで壊れたりするので、今年は静的HTML一本で済ませることにした。最初はGitHub Pagesでホストするつもりだったが、プライベートリポジトリでは課金しないと使えないことが分かったので、予定を変更してS3にアップロードすることにした。問題と解答ファイルは全てリポジトリにコミットするようにして、ページの生成とアップロードはpushでトリガーされるGitHub Actionsで行うようにした。</description>
    </item>
    
    <item>
      <title>内積とはなんなのか</title>
      <link>https://osak.jp/posts/ja/what-is-inner-product/</link>
      <pubDate>Wed, 28 Apr 2021 01:28:00 -0500</pubDate>
      
      <guid>https://osak.jp/posts/ja/what-is-inner-product/</guid>
      <description>定義 主要な性質（余弦定理との関係） 直交判定 三角形の面積 内積と外積 コサイン類似度    高校数学レベルで理解可能な内積の性質と、その利用法について簡単にまとめる。
定義    ベクトル $\vec{a} = (x_a, y_a)$ と $\vec{b} = (x_b, y_b)$ について、内積 $\vec{a} \cdot \vec{b} $ は以下の等式で定義される。
$$ \begin{equation} \label{inner-product} \vec{a} \cdot \vec{b} = x_a x_b + y_a y_b \end{equation} $$
主要な性質（余弦定理との関係）    内積の主要な性質として、以下の等式が成立することが知られている。
$$ \begin{equation} \label{inner-product-cos-thm} \vec{a} \cdot \vec{b} = |\vec{a}||\vec{b}|\cos \theta \end{equation} $$
このことは、ベクトル $\vec{a}$ と $\vec{b}$ によって張られる三角形を考えて、余弦定理 $c^2 = a^2 + b^2 - 2ab \cos \theta_{ab}$ を変形して得られる等式</description>
    </item>
    
    <item>
      <title>シェアボタンとか付けた</title>
      <link>https://osak.jp/posts/ja/added-share-buttons/</link>
      <pubDate>Sun, 04 Apr 2021 03:00:00 -0500</pubDate>
      
      <guid>https://osak.jp/posts/ja/added-share-buttons/</guid>
      <description>Twitterでシェアするボタンがなくて自分でちょっと困ったのでhugo-coderを改造して付けた。ついでにはてなスターとはてなブックマークも。
改造版hugo-coderのリポジトリはこちらです https://github.com/osak/hugo-coder-custom</description>
    </item>
    
    <item>
      <title>Design doc所感</title>
      <link>https://osak.jp/posts/ja/what-i-feel-about-design-docs/</link>
      <pubDate>Fri, 26 Mar 2021 04:03:00 -0500</pubDate>
      
      <guid>https://osak.jp/posts/ja/what-i-feel-about-design-docs/</guid>
      <description>Design Docsのいけすかなさから始まる一連の記事を読んで、やっぱりみんなDesign docで苦労しているんだなぁと思った。自分も仕事でDesign docを書いたり他の人が書いたものをレビューしたりするけど、文書を書いたり読んだりする面倒くささの割に得られるものが想像し辛かったり、読んでも結局何が言いたいのか分からなかったりして、本当に意味があるのかどうか疑問に思うことが多かった。
Design docに関する自分の肌感覚はjmukさんの返信で言及されているものがかなり近い。抽象度の高いところほど後戻りし辛かったり、すれ違いが起きた時の手戻りが大きかったりして間違いが起きた時のダメージが大きいので、そういった箇所での認識をすり合わせできたり、自分の認識が甘かったところにツッコミを入れてもらえたりするとDesign docを書いた意味があったなと思う。逆に、細かい実装の詳細に関して得るものがあることはあまりない。記事中でも言及されているようにそもそもDesign docからコードが乖離することはよくあるし、karino2さんの返信でも指摘されているようにコードを書くこととデザインすることは密接に関連し合っているので、ウォーターフォール的にデザイン先行でドキュメントを書くという行為があまり現実的でないという面もある。そういった点をひっくるめて、Design docの価値としては
 けっきょくのところ要は、変更1個でおわるようなものじゃないなら、いきなりコードを送りつけるんじゃなくて何をしたいのか、どういうことを考えてやったことなのか教えてくれ、という話なんではないか。また、数あるアプローチのうちなぜこのアプローチを採用したか自明でないなら、その理由が知りたくもなる。issueでもいいんだけど、issueはそこまで長々といろいろ検討したりする場でもないし。
 という説明がかなり的を得ているように感じている。
 Design docの具体的な構成要素で言うと、shinhさんの返信でも触れられているように、BackgroundとMotivationはかなり有用性が高いと思う。一人でやる趣味のプログラミングならともかく、仕事では大抵チームでコードを共有する必要があるし、好き勝手な問題を解けばいい訳でもない。自分の現状認識が正しいのか、問題の定義が正しいのか、その問題に解く価値があるのかなど、問題に取り掛かる前に答えを出しておくべき質問はたくさんある。大抵の場合はこのような質問に対して自分一人で確信度の高い答えを出すことは難しいので、文書の形にして他の人に問うということには大きな意義がある。
仮になんらかの理由で自分自身で確信を得ていたとしても、プロジェクトの最後には成果物はチーム全体でメンテナンスする共有物になるため、なぜこの問題を解き、なぜチームでコストを払ってまでメンテナンスする価値があるかの理由を広く共有する必要がある。特に個人的な経験としては、自分が必要性を確信していたとしても、問題意識がチームメンバーやマネージャーと共有されていないというケースは結構あるので、コミュニケーションを円滑にする意味でもDesign docを書く意味はあると思う。この場合は必ずしもDesign docの形を取る必要はないけど、既にそういうフレームワークがあるのにあえて避ける理由も特にない。
BackgroundとMotivationよりも具体的な要素に関しては、影響範囲が特に大きいもの以外はほとんど無視しても良いと思っている。取り上げる価値があるものとしては、例えば
 問題への大まかなアプローチ（文章で数段落、疑似コードで数十行くらい） 外部に公開するAPIの設計 セキュリティやプライバシー関係のハンドリング Roll outの計画  などが考えられる。逆に、これより具体的な実装の詳細や使用するライブラリの選定などに関しては、先に述べたような理由によりデザイン先行にする意味があまりないので、極端に言えば省略してしまっても良いと思っている。
個人的には、半年くらい前まではDesign docに何を書けばいいのか今ひとつ分かっていなかったけど、最近になってこれらの事実に気が付いたので、BackgroundとMotivationの説明に時間をかけるようにして、他の部分は適当に済ませるような方針にしている。ただ、こうするとやはりコード部分の詰めが甘くなって実装が二転三転してしまうといった問題も感じているので、Design docと同時か直後くらいに（実働）1日くらいで小さいPoCを作ってコードレビューのようなものを開くといいのかなぁとも思っている。</description>
    </item>
    
    <item>
      <title>Code Review: Goals and Approaches</title>
      <link>https://osak.jp/posts/en/code-review-goals-and-approaches/</link>
      <pubDate>Sun, 08 Nov 2020 16:03:26 +0900</pubDate>
      
      <guid>https://osak.jp/posts/en/code-review-goals-and-approaches/</guid>
      <description>This is a translation of my original blog post written in Japanese. Baseline translation was powered by DeepL Translate.
  Preface The Goal of Code Review  Main Goals Sub goals   Checklist  High priority Medium priority Low priority   How to avoid turning reviews into a burden  Control the size of reviews Who should be the reviewer? How to organize the discussion Criticism and personal offense   Advice for Reviewers Advice for Code Authors References    Preface    The advantages of code reviews have long been emphasized.</description>
    </item>
    
  </channel>
</rss>
