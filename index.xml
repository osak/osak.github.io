<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>osak.jp</title>
    <link>https://osak.jp/</link>
    <description>Recent content on osak.jp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 07 Dec 2022 17:00:00 +0900</lastBuildDate><atom:link href="https://osak.jp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>オーストラリアのトリ（ドイツのトリ Advent Calendar 2022 7日目）</title>
      <link>https://osak.jp/posts/ja/australian-birds/</link>
      <pubDate>Wed, 07 Dec 2022 17:00:00 +0900</pubDate>
      
      <guid>https://osak.jp/posts/ja/australian-birds/</guid>
      <description>ドイツのトリ Advent Calendar 2022 7日目です。今日はオーストラリアのトリを紹介します。
 Australian white ibisです。クイズプレイヤーや世界遺産が好きな人は世界遺産のオペラハウスがシドニーに存在することを知っていると思いますが、そのすぐ近くにRoyal Botanic Gardenという公園があることはあまり知られてないと思います。自分はオペラハウスを見に行ったついでに付近をうろついていたら発見しました。このトリはその公園にいます。
 前から見たところ。
 歩いてるところ。
 海辺なのでウミネコもめっちゃいる。
   
タスマニア島東部のBichenoというところに生息しているLittle Blue Penguinというペンギンです。タスマニア島はオーストラリア大陸の南東にあり、だいたい北海道くらいの緯度で北海道みたいな気候になっています。知ってましたか？
ペンギン観察ツアーに行ってこいつらが海から上がってくるところを観察していました。光が赤いのはそうじゃないとペンギンがビビるからです。とはいえ人が群がって観察してるので、ペンギンの側としてもかなり警戒しているっぽく、数十分立ち止まってこちらを観察し返してきます。
  タスマニア島のTasmanian Devil Unzooという野生動物保護区みたいなやつにいるトリです。名前なんだっけ。ガチョウの類だと思います。
 手から餌をやる触れ合い体験もできます。自分はやりませんでした。
 なんか黄色いトリ。こいつも名前を忘れてしまった。
   
タスマニア島北部の都市Launceston、その近くにあるCataract Gorgeという国立自然公園にいるトリです。見ての通りクジャクです。何でいるのかはよく分かりません。
   
  
タスマニア島にはトリじゃない動物もいます。順に羊、牛、タスマニアデビル、牡蠣です。シドニーにトリ以外がいるかは知りません。</description>
    </item>
    
    <item>
      <title>タスマニアのおいしい店（smhn Advent Calendar 4日目）</title>
      <link>https://osak.jp/posts/ja/tasmania-gourmet/</link>
      <pubDate>Tue, 06 Dec 2022 16:00:00 +0900</pubDate>
      
      <guid>https://osak.jp/posts/ja/tasmania-gourmet/</guid>
      <description>smhn Advent Calendar 4日目です。ておくれてる？うるせえ4日目だって思ったときが4日目なんだよ。
他の登録者を見た感じ、なんかおいしい店を紹介するのが流行ってるみたいなのでタスマニアのおいしい店を紹介します。みんな参考にしてね。大体おすすめ度順です。
Templo     タスマニアの中心都市、Hobartの有名なレストラン。フレンチっぽいコース料理で6品くらい出てくる。素材の味そのものがいいのはもちろん、味付けも素材をうまく引き立てるようにちょうどよく調整されていてとてもうまい。20席くらいしかない小さいレストランだけど、いつも予約でいっぱいなのも納得できる。
写真は前菜の牡蠣、Kingfish（ヒラマサ）のマリネ、人参のロースト、ほうれん草とリコッタチーズのラビオリ、ラムのロースト、オリーブオイルのチョコケーキ。人参はあまり味が濃くなくて、それがバジルソースとチーズによく合っていた。
      
Stillwater     Hobartから車で2時間半ほど北に行ったところにある、Launcestonという都市の有名なレストラン。水車小屋を改造したレストランで、海に面していて雰囲気が良い。
料理はシーフード、肉、ベジタリアンまで色々ある。前菜のSourdoughとバターは安定のおいしさ（タスマニアはどこに行っても乳製品はうまかった）。ここに来るまでに定番的なおいしいものを食べてきたこともあり、自分はちょっと攻めてOctopus Udonとワラビーのグリルを注文した。
写真だと分かりづらいが、Octopus Udonは柔らかく茹でたうどんを油そばっぽい味付けでタコと和えてサラダ風にしたもので、予想外においしかった。ワラビーはほのかにナッツのような香りがある硬めの肉で、イノシシに似ている。しかし付け合せのソースとカブが絶妙に濃い味付けになっていて、タンパクな肉でも最後まで飽きずに食べられた。あとはデザートのパンナコッタ。これもうまい。
     
Black Cow Bistro    Launcestonにあるステーキハウス。
名前の通り肉がうまい。前菜のPork Bellyは皮がカリカリに揚がっていて食感がとてもよいし、甘酸っぱいソースもよく合っている。メインのWagyu Filetは火の通し加減も絶妙で、噛むたびに肉の旨味が感じられる。
      
Bangor Vineyard Shed     Port Arthurがあるタスマン半島の付け根らへんにあるワイナリー。って言ってもどこって感じですね。各自調べてくだしあ。
ワインとそれに合う食事で優雅にランチができる。写真は牡蠣、チーズ盛り合わせ、ムール貝のワイン蒸し。牡蠣のジェノベーゼソースは塩気とバジルの香りが絶妙にマッチしていてめちゃくちゃうまい。ムール貝は本当にワインとバターで蒸しただけという感じだけど、新鮮なのでそれだけで十分においしいし、何よりダシのふんだんに出ているスープが良い。
    
Devil’s Corner Cellar Door     フレシネ半島へ行く途中にあるワイナリー。ここのワインは単品で飲むとちょっと渋く感じるけど、食事と一緒に飲むと一気に飲みやすくておいしいワインになる。併設されているピザ屋のキノコピザがカマンベールチーズを使っていたんだけど、チーズの塩気とキノコと生地の香ばしさが絶妙にマッチしていておいしかった。別の店で注文したFish &amp;amp; Chipsも魚が新鮮なのでおいしい。</description>
    </item>
    
    <item>
      <title>ソフィーのアトリエ2感想</title>
      <link>https://osak.jp/posts/ja/atelier-sophie-2/</link>
      <pubDate>Tue, 29 Mar 2022 05:21:00 -0500</pubDate>
      
      <guid>https://osak.jp/posts/ja/atelier-sophie-2/</guid>
      <description>ソフィーのアトリエ2をクリアした。難易度はHARDで、ラスボス直前まででサブストーリーもほとんど全て終わらせるペースで進めて58時間くらい。
戦闘    シナリオの戦闘は各ボスで1回詰まっては上位武器を作って再戦するという感じだった。サポートガードがあるのでボスの強攻撃を食らっても即全滅ということはほとんどないが、ボスのHPがそのへんの雑魚と比べて圧倒的に高いので、火力が足りないとジリ貧になって負けてしまう。普通のガードはタイミングが難しいのと、ガードしたところでズメイ以外のボスは全体攻撃をしてくるので、護符はおまけ程度に考えて基本的に火力とデバフで押し切る戦略を取っていた。ズメイはディーボルトの防御力をめちゃくちゃ上げて、守護の護符で攻撃を引きつけるようにして倒した。最後のエルヴィーラ戦はブレイク状態でアインツェルカンプを叩き込むと20000ダメージくらい入ることが分かったので、オーラダメージ超を発現した終末の種火をソフィーに2個持たせて、ブレイクしたら情け無用の一撃付きのドラゴフラムとバーニングロッドで殴り、DGが溜まってたらアインツェルカンプという脳筋戦略で倒した。終末の種火がオーラを10+4+1くらい削るので、ツインアクションで一刀両断も食らわせると20くらいなら1ターンでブレイクできる。ていうか終末の種火に青をまったく入れないとMP消費が発現しないのでタダで撃てるんだけど、これって想定通りなのかな……。
ブレイクさせて高火力を叩き込むムーブはいかにも不思議シリーズという感じで気持ちいい。ツインアクションでガンガン攻撃できるシステムも良い。デバフもツインアクションで1ターン2回スキルを叩き込んでると結構付けられるので便利。ノックバックも不思議・秘密シリーズ通じて強い作品が続いてるので今回も狙いに行ったけど、どれだけノックバックしたかが見えづらいこともあって最後まで効果はよく分からなかった。たまにターンを得したと感じることはあったので無駄ではないっぽいけど……。オーラブレイクに関しては、ブレイクさせたいなら通常攻撃回数を増やした武器で通常攻撃するほうがスキルを当てるより得ということにラスボスに1回負けてから気づいたけど、その時点で既に終末の種火を作れるようになっていたのであまり活用はしなかった。
戦略としても結構使ってるしツインアクションのシステムは総じてかなり好きなんだけど、スキルのダメージが低めで同じことを繰り返しがちになってしまうのはちょっと飽きるなあと思った。特にアトリエは攻撃モーションが長めなのでターンとターンの間で思考が途切れてしまい、余計に疲れてしまう。一番最初のエルヴィーラ戦とズメイ戦はスキル中心に戦ったこともあって長引いてしまい、ツインアクションそのものの爽快感の割にはアトリエっぽい（というか不思議シリーズっぽい？）パズル的な勝ち筋の快感は弱いと感じた。2回ツインアクションを使うことで1人を実質2回以上動かすこともできるので、同じような動きを繰り返しがちになってしまうというのも単調さを増してる原因のように思う。
錬金    リンク調合と触媒のおかげで、割と雑に配置しても高めの効果が発現できるのが楽しい。特に中盤以降はフィールドを歩きながら適当に大採取をしているだけでリンク成分多めの素材が大量に手に入るので、グロリアかリミティア＋リンク成分化＋素材追加投入を発動すれば大抵のことはできる。特性はあまりこだわってないけど十分強い。色系や竜系の合成すると何かが起きるタイプの特性は完全に無視してしまった……。あと1回調合すると全ての効果が開示されるのはかなり楽で良かったし、積極的に新しい効果を使っていこうという気にさせてくれる。
レシピ発想システムは好きだったので復活してくれて（というか不思議シリーズとして続投してくれて）うれしい。煩雑だという批判も結構目にするし実際ちょっと面倒ではあるんだけど、そういうところも含めて錬金術をしている感が出ていて良いと思う。発想システムと言えば、ソフィーにあった謎ポエムで発想するやつがあったのは嬉しかった。よく分からんけど好きなので……。
フレーバー面で言うと、ソフィーとプラフタの切り替えができるのはフレーバーとしては好きだけどあまりシステムとしての意図が分からなかった。錬金レベルも別々に管理されてるけどごく一部のレシピ発想以外には絡んでこないし、キャラによって能力に差があるわけでもないし……。
探索    広々としていながらも一面にオブジェクトが配置してあって飽きないフィールドは、フィリスのような探検している雰囲気が出ていてとても良い。リディスーやライザ2では単調なフィールドを歩き回らされる感が強くて飽きが来てしまったけど、今回は全然そんなこともなく最後まで楽しく探索できた。採取もライザのいろいろな種類の道具を使う楽しさをそのままに、道具を装備しておくだけで適切なものを使ってくれるシステムになっていていい感じ。着実に良いところを伸ばして進化していると感じる。ファストトラベルも使いやすくて良い。あ、ライザ2では箱やツボが密集してるところで杖を振ると複数いっぺんに破壊できて気持ちよかったけど、それができなくなってたのはちょっとだけ残念だった。
天候操作のギミックはちょっと煩雑ではあるけど、とても頻繁に使うわけでもないのでいい塩梅だと思う。錬金術で環境を変えるのは楽しいしね。人工太陽とか……。ジャンプで通れるところは全体的にちょっと分かりづらくて見つけるのに時間がかかることが多かった。特に轟雷宮の雷で浮く足場にジャンプできるところは、視覚的にも手がかりがほとんどなくて10分くらい悩んでしまった。
シナリオ・キャラクター    王道RPGっぽい世界を救う系のシナリオ。ライザのときも思ったけど、ドラクエ等と違って主人公に明確な人格があるせいか、どうも強制的にシナリオを歩かされているように感じてしまう。ライザ以前のアトリエはだいたい主人公が自分のやりたいことを突き詰めていったら成り行きで事件に巻き込まれたり世界を救ってしまったりという構成になっていて、プレイヤーとしても自分で決めて動いてる感があって良かった。そういう意味ではアレットやディーボルトはサイドストーリーでもずっと自分のことばかり話しているので一番アトリエっぽい。特にディーボルトにはエルデ・ヴィーゲにズメイを創り出した張本人で、間接的にせよ夢の核を壊しかけるほどには好き放題してるし、ずっと悩んでるし……。本当はこいつが主人公なんじゃないか？
あと面倒なオタクなので時間が絡むギミックを見ると色々いらんことを考えてしまう。エルデ・ヴィーゲにいる間は現実の時間は経過しないって言うけど、じゃあ外から見るとエルデ・ヴィーゲに行った人が突然精神的に成長したように見えるの？とか（書いてて思ったけどリゼロの死に戻りみたいだな）、歳を取らないのに肉体を鍛えたりできるの？とか（精神的なものは魂がある世界なのでどうとでもなりそう）。プラフタの記憶に関しても曖昧にされるのかと思いきや、さすがにそこはきちんとシナリオ中でも突っ込みつつ回収してくれたのは良かった。整合性を取るためとはいえプラフタが記憶を消す選択をしたのは納得してないけど……。でもプラフタが記憶を持ち帰ったらそれはそれで、ルアード視点ではプラフタが突然大量の知識を得て遠くに行ってしまうように見える訳でかわいそうだよね……。ルアードが根絶にハマッた原因をその辺りに持ってくるのかとも思ったけど、そんな残酷な展開ではなかった。
サイドストーリーはどれも良かった。みんな大人しめ、かつキャラ同士の絡みが少ないので強烈に尖ったストーリーはないけど、夢を叶える途上での日常生活を覗き見ているという感じで、本当にロイテールで暮らしているように感じられて楽しかった。こういう日常描写はやっぱりソフィーの系譜っぽい。大人しめで日常寄りというとロロナっぽくもある。ソフィーとラミゼルのストーリーは作品のメインテーマだけあってやっぱり面白かった。メインキャラじゃないけどカティさんも。知識を溜めるのって楽しいよね。
キャラ設定に不思議シリーズの他作品を彷彿とさせるところが結構あるのでなんか関係性があるのかなとも思ったけど、大部分は触れられずに終わったので邪推し過ぎかなと思う。アレットとオリアスの関係性がスールとマティアスっぽいとか（特にツインアクション時の「オリアスを盾に突っ込む！」ってセリフとか）、ピリカの美的センスがフィリスっぽいとか、カティさんのやってることがカルドさんっぽいとか。まあ変にソフィーを中心にした関係性を増やされてもご都合主義っぽくて萎えてしまうので、触れないくらいでちょうどいいと思う。
キャラのモデルやモーションはどこを取ってもかわいくて / かっこよくてすごい。ソフィーが口を三角形にしてる表情が好き。ツインアクションの後衛側でコマンド入力待ちしてるときの澄まし顔もめっちゃかわいい。モーションもかわいい。プラフタのスカートのもこもこ感もかわいい。
フレーバー    不思議シリーズといえばフレーバー。サイドストーリーの生活感やフィールドの探索感もさることながら、図鑑コメントが相変わらず熱量高い！今回はレシピ発想にも別途コメントが付いているという気合の入りようで、レシピ発想が楽しみになる理由の一つでもあった。ソフィーが既に知ってるアイテムは最初から開示されていたり、錬金レベルが50から始まっていたり、一方のプラフタはレベルが低かったりというシステムの要素を使ったフレーバーがうまい。
シナリオが進むとロイテールの人々がだんだん夢を叶えていくのも好き。
音楽    アトリエシリーズといえば音楽。ソフィーの楽曲のアレンジがあったり、雰囲気を引き継いだりしている曲が結構あるものの、ダンジョンはフィリスやリディスー、町やイベント楽曲はライザに近いと思った。曲調というよりは楽器編成による所が大きいのかな？ソフィーの「白地図をてに」や「春風のポーレチカ」みたいにいつまでも耳に残る曲こそないものの、サントラを聞くとどの曲も情景が蘇ってくるのでやっぱりアトリエだなあと思う。この感覚はリディスーと似てる。
Syndetos（OP楽曲）の変拍子がすごく好き。拍子が変わるところのムービーが躍動感にあふれていて楽曲とぴったり合っている。あとやっぱり記憶に残ってるのはどこかの隙間で・いつかの隙間で（ロイテールのBGM）。不思議シリーズ全般の街で暮らしている感は本当に好き。春告鳥（戦闘曲）も良い。きらめき跳ねて（アレット曲）もアトリエらしい明るい曲で印象に残ってる。
不思議シリーズだし図鑑コメントも充実してるので、楽曲コメントもあるかなと期待してたけど無かったのは残念。
まとめ    総じてかなり楽しいゲームだった。事前情報が出た段階ではせっかく綺麗に終わった不思議シリーズの続編なんて作って大丈夫か？とも思っていたけど、どこを取ってもちゃんと不思議シリーズとして納得のいく構成になっていて良かった。</description>
    </item>
    
    <item>
      <title>2021年振り返り</title>
      <link>https://osak.jp/posts/ja/2021-year-end-summary/</link>
      <pubDate>Fri, 31 Dec 2021 23:59:59 -0600</pubDate>
      
      <guid>https://osak.jp/posts/ja/2021-year-end-summary/</guid>
      <description>2021年振り返り。
今年の前半は毎月の振り返りをしていたものの、7月から面倒になって書くのをやめてしまった。理由はいくつかあるけど、はてなブログのUIが妙に重くてブログを書こうと思い立ってからのリードタイムが長いことが大きい。去年せっかくosak.jpも整理したことだし、しばらくはこっちで書いてみようかと思う。
2021年はなんもしてなかった気がしたけど、リングフィットアドベンチャーを始めたのも、コロナウイルスのワクチンを2回接種したのも、Ray Tracing in One Weekendをやったのも、いろいろパン作りをしていたのも全部今年だった。そういえば引っ越しもしたし、同じ時期に大寒波で大変なことになっていたりもした。ずっと家に引きこもっているからか時間が間延びしているような気がする。
やったゲームを覚えている範囲で並べてみる。軽いブラウザゲー等で覚えてないやつもたぶんある。そういうゲームも記録しときたいね。
 ライザのアトリエ2 トトリのアトリエ アーシャのアトリエ ソフィーのアトリエDX（途中） リングフィットアドベンチャー FORM ぎゃる☆がん2 2縺､縺ｮ縺ｻ縺（文字化けではなくこういう名前のブラウザゲー） Quantum Protocol Recursed Factorio Shapez.io Baba Is You（アップデート） Helltaker みんなの早押しクイズ  Factorioがとにかく大ヒットだった。以前の記事でも書いた通り、1ヶ月で130時間くらいプレイした。資源を集めてラインを構築してちゃんと動くかどうか見張るという行動の繰り返しではあるものの、考えるパートと手を動かすパートがはっきり分かれていることもあり、いくらでも遊んでいられる。通常モードは3回クリアしたのでMODを入れて遊ぼうかと思ったけど結局まだやっていない。Recursedも面白かった。アクションパズルというジャンルはやり直しに手間がかかるので敬遠しがちなんだけど、Recursedはパズル自体を難しくすることで1つの面があまり大きくならないようにしていて、ちゃんとパズルで悩まされる構成になっていて良かった。DLCのIce Palaceはめちゃめちゃな歯ごたえで、表だけ全クリして裏は放置している。
アトリエは2021年中に黄昏を全部終わらせようと思っていたけど、気力が足りずアーシャ以降やってない。アーシャのアトリエは西洋ファンタジー風の雰囲気がとても良く、シナリオを進めるのもアイテムを強化するのも楽しかった。ライザのアトリエ2は戦闘システムが爽快で他のアトリエもこのシステムでプレイしてみたいと思うくらいだったけど、シナリオやキャライベントは作り込みが甘く感じて今ひとつだった。リングフィットアドベンチャーは100日ちょいで1周クリアして、その後はほとんどやっていない。プレイ前に着替えたりコントローラーをセットアップしたりといった準備が必要なので、そういう作業を面倒くさいと思ってしまうとだんだん足が遠のいてしまう。そのせいか9月頃から体重がまた増え始めてきたので、新年にまた運動する習慣を戻したい。
3月にVRヘッドセットのHP Reverb G2を買ったものの、VRゲームはあまりプレイしていない。画面の解像度には文句ないんだけど、Windows Mixed Realityのデバイスとして動くためかSteamVRとの相性が悪く、コントローラーの操作設定がおかしかったり妙にカクついたりと問題が多い。こういったソフトウェアの相性問題や物理的な取り回しやすさを考えるとOculus Questが一番良いのかなぁとも思うが、Facebookアカウントと紐付けないといけないという点がどうにも気持ち悪くて二の足を踏んでいる。
数学の勉強はペースにムラがあったものの、毎週の進捗報告会が良いペースメーカーになってくれたので1年を通じて続けることができた。位相論の基礎から始まり、複素解析を経て測度論、ルベーグ積分、関数空間と勉強を進めている。測度論とルベーグ積分では抽象的な議論が続いていたので、関数空間では久しぶりに具体的なものを触れそうで楽しみ。1年を通してこれらの勉強をしてきたことで、数学的に厳密な議論の作り方や無限に対する考え方の感覚をかなり身につけることができたと感じている。
趣味プログラミングはあんまりやらなかった気がする。明確にやったと言えるのは
 Ray Tracing in One Weekend ICFPC ハグルでハグハグ  Ray Tracing in One Weekendは名前の通りお手軽なレイトレーシングのハンズオン教本で、サンプルコードを写経していくとレイトレーシングのプログラムがだんだんと出来上がっていくようになっている。最初はただの円板を描くだけだったのが、章を進めるにつれて影ができたり反射光ができたりと目に見える変化が起きるので面白い。ICFPCはいつものようにインフラをやっていた。スコアボードは生成スクリプトが魔境になってしまったことを除けば方針は良かったと思う。ソルバーの方では、平面上の点の焼きなましのような逐次改善していく＋人間の手助けが役に立つタイプのプログラムをビジュアライズする経験値があまりにも足りず、こういうことができたら嬉しいかなぁと思っていたことを結局実装できずに終わってしまったのが悔しい。後からTwitter等で他のチームが作っていたビジュアライザを見ると、リアルタイムで焼きなましの状況を表示したり人間が点の位置を再配置したりする機能を実装しているチームが結構あったので、こういうコードがさっと書けるようになりたい……と思いつつまだ手を付けていない。
ハグルでハグハグはハグルというボードゲームをオンラインの仲間内で遊ぶために作ったプラットフォームで、配られたカードを見せ合ったりトークンをやりとりしたりといったアクションがブラウザ上でできるようになっている。Kotlin + Spring + PostgreSQLでバックエンドを書いてReact + Redux + Redux-Sagaでフロントエンドという結構真面目な構成になっているけど、実際のところバックエンドはある程度の整合性を保ちつつDBへ読み書きができればいいので、FirebaseやAWS AppSync等を使ってサーバレスにしたほうが楽で良かったかなと思っている。そういった経緯もあって年末にAWS Amplifyを触ってみている。
コロナ禍でみんな暇なのか、Twitterでプログラマ論について議論が盛り上がっては炎上するのを数回見た。こういった議論に入れ込みすぎることの是非はさておき、自分が何を大切に思っているかを見つめ直すきっかけとしてはそこそこ有用なので、見かけるたびに数時間くらい考えている。この記事は振り返りなので各論について特に意見表明はしないけど、これらの思索を通じて、最近の自分は技術が社会的に価値を生むかどうかを過度に重視してしまっており、それが新しいことを試すときの心理的障壁になっていると感じた。たぶん仕事に毒されすぎているんだと思う。プログラムを書いて思ったとおりに歯車が噛み合って動くと面白い、だからプログラムを書くという純粋な気持ちを2022年には取り戻していきたい。</description>
    </item>
    
    <item>
      <title>Log4jの脆弱性、ライブラリとの付き合い方</title>
      <link>https://osak.jp/posts/ja/log4j-vulnerability-and-how-to-deal-with-libraries/</link>
      <pubDate>Thu, 23 Dec 2021 05:40:00 -0600</pubDate>
      
      <guid>https://osak.jp/posts/ja/log4j-vulnerability-and-how-to-deal-with-libraries/</guid>
      <description>Log4j2に任意コード実行の脆弱性が見つかった（CVE-2021-44228）。ログに特定の文字列が含まれているとLog4jのフォーマッタが反応し、JNDIを経由してリモートからJava classを動的ロードするという内容で、見た目としてはprintfフォーマット文字列攻撃の発展型のように見える。Log4j自体がJavaでのロギングのデファクトスタンダードになっていることもあり、あちこちのWebサイトでAttack surfaceが発見されていてすごいことになっている。
ログにはユーザ入力がそのまま出力されることも珍しくないのだから、そんな信頼できない入力をフォーマット文字列のように扱うという設計自体が驚きで、Log4jのように広く使われているOSSにそんな実装が入っているということは意外だった。とはいえエンタープライズ用途だと、パッケージ品をコードを変えずに設定ファイルをいじるだけで運用時に挙動を変えたいという欲求がありそう（エンジニアの工数を割きたくない、運用担当のスキルがコードを書けるほど高くない等）なので、そういう汚いハックをしたい企業が影響力を持った結果としてこういう機能が入ったのかなというのが最初の所感だった。
ところが実際のところは考慮不足に近い設計ミスのようで、どうも問題になっているLookupという機能自体は、ログが吐かれるコンテキストに応じて違う値に解決されてほしいプレースホルダをLayoutの一部として埋め込むための仕組みとして作られているように見える（Log4j - Log4j 2 Lookups）。これがテンプレートに含まれるプレースホルダだけを置換するならまだ いいのだが1、実際にはConfigに由来する文字列だけでなく、ロガーに渡されたログ対象の文字列そのものに対しても同じ文字列置換を掛けていたらしい（MessagePatternConverter.java）。で、その文字列置換の方法の一つとしてJNDIを利用したリソースの解決があるため、結果としてログ文字列に ${jndi URI} を潜り込ませることができれば好き勝手にリモートのクラスを読み込ませられるようになっていた。要するにユーザー入力をprintfのフォーマット文字列に使っているようなもので、こんな問題が気づかれずに長期間放置されていたとはにわかには信じがたい。
脆弱性の詳細についてはさておき、この問題に関して、OSSライブラリの機能を完全に理解せずにプロダクトに投入すること自体が無責任ではないかという意見がある。こういった意見に対する反論として、全てのライブラリのコードを読むのは現実的でないとか、複雑な実装について試行錯誤する時間をスキップするために集合知に頼っているのだから本末転倒だといったものをよく見かけるが、今回のように非常に大きく防御の難しい脆弱性を抱え込むというリスクを考えると、やっぱり盲目的にライブラリを信用するのはある種の責任の放棄だと感じる。もちろんこの議論は無限後退を始めるとキリがなく、ライブラリがだめなら言語処理系はどうなんだ、OSはどうなんだ、ファームウェアはどうなんだとなってしまうので、どこかで実際にコードを読まずに信頼するという線引きが必要になるし、人や組織によってどの程度の規模や領域のコードなら読めるのか、また読んで理解するコストがリターンに見合うのかという境界は異なるだろう。自分もLog4jのコードはほとんど読んだことがないので人のことはとやかく言えない。
個人的には、実際にこういった脆弱性が存在することを予見できたかはともかく、単なるログライブラリとして自分が日頃使っている機能に対してlog4jの規模が大きすぎるのではないか、という疑いを持ったことがなかった点は反省するべきだと感じている。直感に対して規模が大きいということはそれだけ使っていない、もしくは理解していない機能が多いということだし、そういった理解していない機能が問題を引き起こす可能性は十分にありえる。これはLog4jに限った話ではなく、一般に単体のライブラリとしてコード量の多いものや、大量のtransitive dependencyを要求するライブラリなどにも当てはまる。
以前から（今回の脆弱性とは無関係に）数百行くらいの実装で済む機能ならそのためだけに既存のライブラリを引っ張ってくるよりも、自前で書いてしまったほうが中長期的にはメリットが大きいのではないかと考えていた。直接的な理由は色々なライブラリが大量にdependencyを引っ張ってくることによってdependency hellが発生したり、ビルド速度が低下したりといった問題（特にWebpackのようなbundlerが絡むビルドでは顕著になる）にうんざりしていたからだが、自前で機能を実装すれば余計な機能を背負い込まずに済むし、自分のプロダクトに特化した改造を加えたいときにも小回りが効きやすくなる。もちろんこの選択にはトレードオフがあり、短期的にはメンテナンスするべきコード量が増えるので開発速度が落ちる可能性があるし、複数人のチームで働くときは他のメンバーがこういった汎用的な関数をメンテナンスできる程度の習熟度があるとは必ずしも仮定できない。それでも、このアプローチは先に挙げたメリットに加えて、必要以上に大きなライブラリをコードやドキュメントすら理解せずに使うことの無責任さへの解答にもなっているので、しばらく試してみる価値があるように思う。
2021/12/23 22:50-06:00 @na4zagin3氏の指摘を受けて最終段落の文章を修正。
  実はそれでも良くなくて、数日後に続いて発見されたCVE-2021-45046とCVE-2021-45105はLookupが再帰的に展開されることを利用して、テンプレートが特定のLookupを含むときにPayloadを埋め込んでいる。 &amp;#x21a9;&amp;#xfe0e;
   </description>
    </item>
    
    <item>
      <title>最近やってたこと</title>
      <link>https://osak.jp/posts/ja/recent-activities-2021-11-01/</link>
      <pubDate>Mon, 01 Nov 2021 04:00:00 -0500</pubDate>
      
      <guid>https://osak.jp/posts/ja/recent-activities-2021-11-01/</guid>
      <description>ブログを書く気力が出なくて、はてなブログで書いてた月例報告を3ヶ月連続でスキップしている。仕事等で精神的に疲れていて振り返りをする気力が出なかったというのも一因としてあるが、はてなブログのエディタが重くて使いづらいというのも理由としては大きい。ローカルでMarkdownを書く形なら書きやすいんじゃないか……と思ったのでこっちで書いてみる。
 ゲーム。8月末についにFactorioに手を出した。デモ版を15時間くらいやったあとに製品版を買って、61時間弱で初クリアした。その次は33時間半、RTAやWiki等を見てなんとなく勉強したあとの3回目は19時間半。3回目のクリア後は引き続きプレイして、全研究の実績を解除した。プレイし始めて最初の1週間くらいはほぼ全ての時間をFactorioに使っている感じで、夜1時ころにプレイし始めて気付いたら18時間経って夜7時になってるといった密度でプレイしていた。結局1ヶ月で130時間くらいプレイして、やりたいことは一段落したのでゲームプレイはやめてRTAや極限攻略動画を見ている。Michael Hendriks氏のシリーズが面白い。しばらく時間を置いてまたやりたい気持ちが復活してきたので、何かMODを入れてプレイしようと思っている。
 読んだ漫画。読書メーターの記録を見返すと、7月以降に以下の作品を新しく読んでいる。
 らーめん再遊記（3巻） らーめん才遊記 ヤマケイ新書 山岳遭難の教訓 &amp;ndash;実例に学ぶ生還の条件&amp;ndash; 狐のお嫁ちゃん 喰いしん坊！ ホレンテ島の魔法使い メイドインアビス（10巻） ご注文はうさぎですか？ うちの師匠はしっぽがない（5、6巻） 紡ぐ乙女と大正の月（2巻） ジョジョリオン（27巻） パンプキン・シザーズ 刃牙道 バキ道 さよなら幽霊ちゃん  あと、覚えてる限りではバキ道を読んだあとでバキシリーズを全部読み返したのと、Twitterでなんか言及を見かけたので火の鳥を読み返した。まあ漫画の読み返しはよくあるのでいちいち書いてるとキリがない。
印象に残ってるやつだと、ごちうさは面白かった。アニメ1期の1話を見てあんまり面白くないなと思って以来作品としては触れてなかったが、COMIC FUZの月額プランで読めるきららMAXに載ってる最近の話は面白いので、せっかくだし履修しておこうと思って単行本を全部読んだ。漫画は最初から絵柄も安定しているし、キャラの作り込みやストーリーもしっかりしていて、10年前に連載開始した作品なのに最近のストーリー重視のきらら漫画と比べても全く引けを取らない濃さだった。
パンプキン・シザーズも面白かった。生身で戦車と戦えるオーランドはバキのような純粋な力の興奮があるし、WW1くらいの世界から技術力だけ超高速で進歩したようなアンバランスな世界観や軍のパンプキン・シザーズ部隊を中心にしたエピソード構成は、攻殻機動隊SACの個別エピソードのような独特のSFっぽさと人の葛藤を描く味わいがある。かなり終わりに近づいていながらも完結してないのが残念。
 ルベーグ積分の勉強は、教科書（伊藤清三「ルベーグ積分入門」）の測度論パートを抜け、ルベーグ積分の定義と収束定理まで終わらせたので一区切りというところまで到達した。ルベーグ積分を知ったことそのものよりも、測度論を勉強する過程で身についた無限に対する感覚や証明のテクニックがかなり有用だと感じる。
 いっぺんにまとまった文章を書こうとすると気後れしがちなので、これくらいの粒度でちまちま書くのがいいのかもしれない。しばらくこういうスタイルで近況報告を書けるといいな。</description>
    </item>
    
    <item>
      <title>ICFPC2021 Writeup</title>
      <link>https://osak.jp/posts/en/icfpc-2021/</link>
      <pubDate>Tue, 13 Jul 2021 09:10:00 -0500</pubDate>
      
      <guid>https://osak.jp/posts/en/icfpc-2021/</guid>
      <description>I participated in ICFP Content 2021 with regular teammates. Our team name was &amp;ldquo;manarimo&amp;rdquo;, which is what we&amp;rsquo;ve been using for years recently.
 Repository： https://github.com/manarimo/ICFPC2021/ Portal website： http://icfpc2021-manarimo.s3-website-us-east-1.amazonaws.com/best.html Manual solver： http://icfpc2021-manarimo.s3-website-us-east-1.amazonaws.com/kenkoooo/#/problem/1  We ranked at the second place as of when the scoreboard was frozen. I&amp;rsquo;m happy with this result as we are #1 among Japanese teams. I was thinking we could get the global #1, however, RGBTeam did a better job then us.</description>
    </item>
    
    <item>
      <title>ICFPC2021感想</title>
      <link>https://osak.jp/posts/ja/icfpc-2021/</link>
      <pubDate>Tue, 13 Jul 2021 07:10:00 -0500</pubDate>
      
      <guid>https://osak.jp/posts/ja/icfpc-2021/</guid>
      <description>ICFP Content 2021にいつものメンバーで参加した。チーム名はここ最近使っているmanarimoにした。
 リポジトリ： https://github.com/manarimo/ICFPC2021/ ポータルサイト： http://icfpc2021-manarimo.s3-website-us-east-1.amazonaws.com/best.html 手動ソルバー： http://icfpc2021-manarimo.s3-website-us-east-1.amazonaws.com/kenkoooo/#/problem/1  順位は終了前のスコアボード凍結時点で2位。とりあえず日本勢の中では1位になれたので嬉しい。全体1位も行けるかと思っていたけど、RGBTeamが強かった。他のチームもいい解を出し惜しみして潜伏しているかもしれないけど、少なくとも今は見えない点数に価値はないので……。
概要 &amp;amp; 方針    今年の問題は「脳カベ」というゲーム（自分は知らなかったけど、とんねるずの1コーナーらしい）を題材にしており、メッシュとして表現された人物を多角形の中に埋め込む問題だった。 メッシュの辺の長さをあまり変えないようにしながら頂点の座標を好きに選ぶことで多角形に埋め込む。ただし座標は整数である必要がある。そうして配置を決めたあと、多角形の各点について一番近い頂点との距離を計算し、その総和が小さいほどよい。
いかにも2016年の折り紙回を彷彿とさせる設定で、手作業で解くのが肝だと判断したので、とりあえず手で遊べるビジュアライザの構築を優先して、並列で焼きなましベースや特定のパターンに特化したプログラムも実装するという方針になった。 24時間が経過したところでルール追加の発表があり、各面ごとに特定の座標にメッシュの頂点を配置すると、他の特定の面で制限を緩和するアイテムが使えるようになるというシステムが導入された。たとえばメッシュの頂点を1点だけ多角形の外に配置したり、1辺だけ長さ制約を無視して伸び縮みさせられるようになったりする。これらも基本的には手作業で対応したが、アイテムを取ろうとするとその面では最適解を諦める必要があるケースも存在するため、アイテムを取るか取らないかは全体の最適性を考える必要がある。いかにも計画問題っぽい見た目をしているので、とりあえず各面についてアイテムを使う解と使わない解を用意して、依存している面でアイテムが取れているかどうかを考慮しつつ提出時に最適な組み合わせを計算するという方針にした（最終的には線形計画問題としてライブラリで殴った）。
最終的には以下のツール群が作られていた（だいたい時系列順）。
 bruteforce： 全ての頂点の配置を試し、有効かつ一番スコアの良かったものを出力する (@pepsin_amylase, @y3eadgbe) checker： 解の正当性を検査する (@osa_k, @pepsin_amylase) gen_web： 問題と解答を一覧するためのHTMLを生成する (@osa_k) ビジュアライザ： 手で頂点を動かして遊べるビジュアライザ (@kenkoooo &amp;amp; keita) 焼きなまし： 近傍としては点の1マス移動、辺の1マス移動、全体の1マス移動、次数1の点の点対称移動、次数2の点の鏡像移動、多角形の頂点上へのワープを使い、ペナルティとしてははみ出ている頂点の多角形までの距離、はみ出ている辺の個数、長さ制約を満たしていない辺の逸脱度合いを使っている (@kawatea, @y3eadgbe, @osa_k) 外周うめるやつ： ぴったり埋め込まれた状態から頂点をシャッフルしたような問題が複数あった（例: 64）ため、メッシュの辺の長さと多角形の辺の長さを比べて、連続して一致するような頂点列を出力する (@yuusti) manten： スコアボードから満点解の存在が分かっている問題に対して、メッシュの頂点と多角形の頂点の対応関係を全て試す (@pepsin_amylase) package_solutions： 生成した解答ファイルの中から一番点数が高いものを提出する。アイテムが追加された後は、どの面でアイテムを取得するのがいいかを線形計画問題として解くようになった (@pepsin_amylase) globalist-optimize： GLOBALISTが使える問題に対して、山登り法を使ってコストを最適化する (@kenkoooo)  手動ではmkut, @y3eadgbe, @kawatea, @yuustiが中心になってひたすらパズルを解いていた。64や105のような問題を、自動ソルバの力を借りずに手だけで解いていくのは見ていてかなり面白かった。
自分のやったこと    自分は主にポータルサイトの管理、手作業での解答作成、焼きなましの最適化、焼きなましの並列実行を行った。
ポータルサイト    ポータルサイトは例年はWebアプリケーションを作っているのだが、毎年I/O絡みで何かしら問題が起きたり変なバグを埋め込んで嫌なタイミングで壊れたりするので、今年は静的HTML一本で済ませることにした。最初はGitHub Pagesでホストするつもりだったが、プライベートリポジトリでは課金しないと使えないことが分かったので、予定を変更してS3にアップロードすることにした。問題と解答ファイルは全てリポジトリにコミットするようにして、ページの生成とアップロードはpushでトリガーされるGitHub Actionsで行うようにした。</description>
    </item>
    
    <item>
      <title>内積とはなんなのか</title>
      <link>https://osak.jp/posts/ja/what-is-inner-product/</link>
      <pubDate>Wed, 28 Apr 2021 01:28:00 -0500</pubDate>
      
      <guid>https://osak.jp/posts/ja/what-is-inner-product/</guid>
      <description>定義 主要な性質（余弦定理との関係） 直交判定 三角形の面積 内積と外積 コサイン類似度    高校数学レベルで理解可能な内積の性質と、その利用法について簡単にまとめる。
定義    ベクトル $\vec{a} = (x_a, y_a)$ と $\vec{b} = (x_b, y_b)$ について、内積 $\vec{a} \cdot \vec{b} $ は以下の等式で定義される。
$$ \begin{equation} \label{inner-product} \vec{a} \cdot \vec{b} = x_a x_b + y_a y_b \end{equation} $$
主要な性質（余弦定理との関係）    内積の主要な性質として、以下の等式が成立することが知られている。
$$ \begin{equation} \label{inner-product-cos-thm} \vec{a} \cdot \vec{b} = |\vec{a}||\vec{b}|\cos \theta \end{equation} $$
このことは、ベクトル $\vec{a}$ と $\vec{b}$ によって張られる三角形を考えて、余弦定理 $c^2 = a^2 + b^2 - 2ab \cos \theta_{ab}$ を変形して得られる等式</description>
    </item>
    
    <item>
      <title>シェアボタンとか付けた</title>
      <link>https://osak.jp/posts/ja/added-share-buttons/</link>
      <pubDate>Sun, 04 Apr 2021 03:00:00 -0500</pubDate>
      
      <guid>https://osak.jp/posts/ja/added-share-buttons/</guid>
      <description>Twitterでシェアするボタンがなくて自分でちょっと困ったのでhugo-coderを改造して付けた。ついでにはてなスターとはてなブックマークも。
改造版hugo-coderのリポジトリはこちらです https://github.com/osak/hugo-coder-custom</description>
    </item>
    
    <item>
      <title>Design doc所感</title>
      <link>https://osak.jp/posts/ja/what-i-feel-about-design-docs/</link>
      <pubDate>Fri, 26 Mar 2021 04:03:00 -0500</pubDate>
      
      <guid>https://osak.jp/posts/ja/what-i-feel-about-design-docs/</guid>
      <description>Design Docsのいけすかなさから始まる一連の記事を読んで、やっぱりみんなDesign docで苦労しているんだなぁと思った。自分も仕事でDesign docを書いたり他の人が書いたものをレビューしたりするけど、文書を書いたり読んだりする面倒くささの割に得られるものが想像し辛かったり、読んでも結局何が言いたいのか分からなかったりして、本当に意味があるのかどうか疑問に思うことが多かった。
Design docに関する自分の肌感覚はjmukさんの返信で言及されているものがかなり近い。抽象度の高いところほど後戻りし辛かったり、すれ違いが起きた時の手戻りが大きかったりして間違いが起きた時のダメージが大きいので、そういった箇所での認識をすり合わせできたり、自分の認識が甘かったところにツッコミを入れてもらえたりするとDesign docを書いた意味があったなと思う。逆に、細かい実装の詳細に関して得るものがあることはあまりない。記事中でも言及されているようにそもそもDesign docからコードが乖離することはよくあるし、karino2さんの返信でも指摘されているようにコードを書くこととデザインすることは密接に関連し合っているので、ウォーターフォール的にデザイン先行でドキュメントを書くという行為があまり現実的でないという面もある。そういった点をひっくるめて、Design docの価値としては
 けっきょくのところ要は、変更1個でおわるようなものじゃないなら、いきなりコードを送りつけるんじゃなくて何をしたいのか、どういうことを考えてやったことなのか教えてくれ、という話なんではないか。また、数あるアプローチのうちなぜこのアプローチを採用したか自明でないなら、その理由が知りたくもなる。issueでもいいんだけど、issueはそこまで長々といろいろ検討したりする場でもないし。
 という説明がかなり的を得ているように感じている。
 Design docの具体的な構成要素で言うと、shinhさんの返信でも触れられているように、BackgroundとMotivationはかなり有用性が高いと思う。一人でやる趣味のプログラミングならともかく、仕事では大抵チームでコードを共有する必要があるし、好き勝手な問題を解けばいい訳でもない。自分の現状認識が正しいのか、問題の定義が正しいのか、その問題に解く価値があるのかなど、問題に取り掛かる前に答えを出しておくべき質問はたくさんある。大抵の場合はこのような質問に対して自分一人で確信度の高い答えを出すことは難しいので、文書の形にして他の人に問うということには大きな意義がある。
仮になんらかの理由で自分自身で確信を得ていたとしても、プロジェクトの最後には成果物はチーム全体でメンテナンスする共有物になるため、なぜこの問題を解き、なぜチームでコストを払ってまでメンテナンスする価値があるかの理由を広く共有する必要がある。特に個人的な経験としては、自分が必要性を確信していたとしても、問題意識がチームメンバーやマネージャーと共有されていないというケースは結構あるので、コミュニケーションを円滑にする意味でもDesign docを書く意味はあると思う。この場合は必ずしもDesign docの形を取る必要はないけど、既にそういうフレームワークがあるのにあえて避ける理由も特にない。
BackgroundとMotivationよりも具体的な要素に関しては、影響範囲が特に大きいもの以外はほとんど無視しても良いと思っている。取り上げる価値があるものとしては、例えば
 問題への大まかなアプローチ（文章で数段落、疑似コードで数十行くらい） 外部に公開するAPIの設計 セキュリティやプライバシー関係のハンドリング Roll outの計画  などが考えられる。逆に、これより具体的な実装の詳細や使用するライブラリの選定などに関しては、先に述べたような理由によりデザイン先行にする意味があまりないので、極端に言えば省略してしまっても良いと思っている。
個人的には、半年くらい前まではDesign docに何を書けばいいのか今ひとつ分かっていなかったけど、最近になってこれらの事実に気が付いたので、BackgroundとMotivationの説明に時間をかけるようにして、他の部分は適当に済ませるような方針にしている。ただ、こうするとやはりコード部分の詰めが甘くなって実装が二転三転してしまうといった問題も感じているので、Design docと同時か直後くらいに（実働）1日くらいで小さいPoCを作ってコードレビューのようなものを開くといいのかなぁとも思っている。</description>
    </item>
    
    <item>
      <title>Gyakubenileプレイ記録</title>
      <link>https://osak.jp/memo/gyakubenile/</link>
      <pubDate>Thu, 28 Jan 2021 01:30:00 -0600</pubDate>
      
      <guid>https://osak.jp/memo/gyakubenile/</guid>
      <description>逆紅クイズとWordleを合体させたゲームGyakubenileのプレイ記録。
1    リプレイ
 1手目：とりあえずたくさん文字を開けたほうがいいな、でも存在しない言葉を入れるのもちょっとな→「いろはにほへと」（存在するって言うのか？） 2手目：まだよくわからん。7文字で切りの良いところで→「あさきゆめみし」 3手目：最初に「財閥」が見えるが他のところが分からん。「富」って富山？財閥で栄えた都市を聞いてるとかか？よく分からんけど→「みついざいばつ」（「と」が緑なのを忘れてた） 4手目：ドイツの都市！！→「ふらんくふると」  2    リプレイ
 1手目：41でしばらく考えたけど分からん。とりあえず使えそうな文字を開こう→「てにをはあう」（「ある」の「あ」、「いう」の「う」） 2手目：41の後1文字……？「位」とかか？都道府県ランキングの下の方ってこと？→「さいたまけん」 3手目：「にほん」「さいてい」「ひょうてんか」が見えた→「あさひかわし」  Twitterで他の人のコメントを見たら、クイズ界で41のものは旭川しかないと言ってる人がいてなるほどと思った。
3    リプレイ
 1手目：めっちゃ文字入るやん、お得～。とりあえず使えそうな文字を開こう→「てにをはなどかる」 2手目：「（6文字）としては「はなしを……」……がある、……■か■をなんというでしょう？」なのは分かった。「はなしを（動詞）る（名詞）？」でもこれだけじゃ全然分からん。使えそうな文字をもっと開こう→「いかくさしすせそ」（形容詞・形容動詞の切れ目＋そこそこありそうな文字＋濁点込みで2倍開ける） 3手目：「「～」といういみがある、よせでぜんざが（4文字）するじかん」は分かった。普通に知らん言葉では？→しばらく考える→「か」と「い」が入り、8文字で話……開口一番？→最初は「よじじゅくご」か、確かに整合している→「かいこういちばん」  普通に知らない単語だったけど、逆紅の推理と黄色くなってる文字の両方をキーにして思いつけた。文字ヒントがなかったら3手目で「」内は読めなかったと思う。
4    リプレイ
 1手目：なんも開示されてないじゃん、とりあえず使えそうなものを開こう→「てにをはいか」 2手目：全然文字増えない……。末尾は「～はなんでしょう」っぽい。前半の最後2文字は「もつ」か「おく」かな？文字が少なすぎてどうしようもない。「もつ」「おく」「する」「～もある」「こともある」あたりが見えると嬉しそう→「おするもこう」 3手目：「もつ」で確定っぽい。「ばにおう」は「ひろばに～」とか？そして置くものであることが分かる→「■う■いをもつ」の「■う■い」って形容詞とかじゃなくこれで名詞っぽいよな。こんな形の単語そうそうなさそう→「どうたい」ってそうだな→胴体が特徴的で置くもので6文字で「す」が入る→「すふぃんくす」  なんでもありルールなのに文字が開示できてなさすぎて戦略ミス感もあるけど、結果的には最後の推理がかなり逆紅っぽくて気持ちよかった。
5    リプレイ
なんでもありだとWordle要素ないし、毎回展開が似てしまうので実在する単語縛りにした。答えっぽいのを思いついて手数も損しないならそれも積極的に攻めていく。
 1手目：最初は「えいが」「まんが」あたりか？でも2文字目だけ長音という作品はぱっと思いつかない。とりあえず映画に関連しそうな人名かつ文字の重複がないのを入れよう→「あらがきゆい」 2手目：全然開かない（絶望）そもそも最初3文字開いてないのはどういうことだよ……長音は出てるから「げーむ」でもないし「ら」も開いたから「どらま」でもない……。でも後半は「しゅじんこうの■きやくをえんじたのはだれ？」に見える（？）とりあえず俳優で文字を開ける人の名前を入れよう→「みうらはるま」 3手目：最初は「どうわ」っぽいが、『』にはまる童話の名前が思いつかない。「むーみん」っぽいけど作品名としては「むーみんだにの～」みたいになりそうで合わないし、そもそもムーミンって童話か？ここ以外は文構造すら全然分からないので助詞を開けたい→「じんとにっく」 4手目：えっマジでムーミンなのか。「しゅとをへるしんきにおく」も見えるのでこれは確定ですね→「ふぃんらんど」  Wordleしようと思ったのにWordle要素を一切使わなかった。ムーミンって童話なのかなぁ。「ムーミン物語」って言い方も聞いたことない。
6    リプレイ
 1手目：「なんでしょう？」「どこでしょう？」「だれでしょう？」の識別ができると嬉しい。加えて「～がある」「～という」の存在も見えるとよさそう。→完璧なのは思いつかないけど「かんとうへいや」。格助詞や接続しもそこそこ入ってるし悪くないやろ 2手目：末尾どのパターンでもないんだが……「～から何かい■というでしょう？」かな？ぱっと思いつくのは「海里」で答えが7文字だから「じゅうにかいり」？色も合っている。でも「なんかいりというでしょう？」って問題文になるか？「領海十二海里」って言う気がしなくもないが、熟語として確立されてるのかなあ。→「会議」にもなる。こっちのがクイズっぽい。そうなると「ゃべ」が怪しい。でもそんな地名あるか？→前半の最後に出てきてるから、「ゃべ」の後は1文字くっついて接続詞っぽい。「おしゃべり」？→ってことは→「いどばたかいぎ」  逆紅でうまくハマったときのような推理が決まって嬉しい。色は最終確認にしか使わなかった。
atthis    リプレイ</description>
    </item>
    
    <item>
      <title>Code Review: Goals and Approaches</title>
      <link>https://osak.jp/posts/en/code-review-goals-and-approaches/</link>
      <pubDate>Sun, 08 Nov 2020 16:03:26 +0900</pubDate>
      
      <guid>https://osak.jp/posts/en/code-review-goals-and-approaches/</guid>
      <description>This is a translation of my original blog post written in Japanese. Baseline translation was powered by DeepL Translate.
  Preface The Goal of Code Review  Main Goals Sub goals   Checklist  High priority Medium priority Low priority   How to avoid turning reviews into a burden  Control the size of reviews Who should be the reviewer? How to organize the discussion Criticism and personal offense   Advice for Reviewers Advice for Code Authors References    Preface    The advantages of code reviews have long been emphasized.</description>
    </item>
    
  </channel>
</rss>
